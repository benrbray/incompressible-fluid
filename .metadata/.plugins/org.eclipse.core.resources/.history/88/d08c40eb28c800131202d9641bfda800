package root;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.util.Arrays;

import edu.emory.mathcs.jtransforms.fft.DoubleFFT_2D;
import edu.emory.mathcs.jtransforms.fft.RealFFTUtils_2D;

public class FluidField {
	
	private int _size;
	private int _area;

	private double[] _u;
	private double[] _uo;
	private double[] _v;
	private double[] _vo;

	private double[] _d;
	private double[] _do;
	
	private int MOD;
	
	private DoubleFFT_2D _fft;
	private RealFFTUtils_2D _fftUtils;
	
	//// CONSTRUCTOR ----------------------------------------------------------
	
	public FluidField(int size){
		_size = size;
		_area = _size * _size;
		MOD = 1 << (int)(Math.log10(size)/Math.log(2) - 1);
		
		// Initialize Velocities
		_u  = new double[_area];
		_uo = new double[_area];
		_v  = new double[_area];
		_vo = new double[_area];
		_d  = new double[_area];
		_do = new double[_area];
		
		for(int i = 0; i < _area; i++){
			// Coordinates
			double x = mod(i,_size) - 128;
			double y = Math.floor(i/_size) - 128;
			double r = Math.sqrt(x*x + y*y);
			double u_x = (r==0 ? 0 : x/r);
			double u_y = (r==0 ? 0 : y/r);
			
			_u[i] =  (r==0 ? 0 : (-u_y * 200 / Math.log(r)) );
			_v[i] =  (r==0 ? 0 : ( u_x * 2000 / Math.log(r)) );//200 * (Math.random() - 0.5);
			
			if(x > 20 && x < 100 && y > -20 && y < 20){
				_d[i] = 1.0;
			}
		}
		
		// FFT
		_fft = new DoubleFFT_2D(_size, _size);
		_fftUtils = new RealFFTUtils_2D(_size, _size);
	}
	
	//// PRIMARY UPDATE -------------------------------------------------------
	
	public void update(double dt){
		double[] temp;
		
		// Advect X Velocity
		/*temp = _u; _u = _uo; _uo = temp;
		this.advect(_u, _uo, dt, _uo, _vo);
		
		// Advect Y Velocity
		temp = _v; _v = _vo; _vo = temp;
		this.advect(_v, _vo, dt, _uo, _vo);*/
		
		// FFT
		_fft.realForward(_u);
		_fft.realForward(_v);
		_fft.realInverse(_u, true);
		_fft.realInverse(_v, true);
		
		// Advect Density
		temp = _d; _d = _do; _do = temp;
		this.advect(_d, _do, dt, _u, _v);
	}
	
	//// ADVECTION ------------------------------------------------------------
	
	public double[] advect(double[] updated, double[] quantity, double dt, double[] u, double[] v){
		int index = 0;
		
		double prevX,prevY;			// backprojection
		double fracX,fracY;			// fractional part
		int    top,bot,left,right;	// blerp
		double tl,tr,bl,br;			// blerp
		double blerpLeft,blerpRight;// blerp
		double blerp;
		
		for(int y = 0; y < _size; y++){
			for(int x = 0; x < _size; x++){
				prevX = x - u[index] * dt;
				prevY = y - v[index] * dt;
				
				// Corner coordinates
				top = (int)Math.floor(prevY);
				bot = top + 1;
				left = (int)Math.floor(prevX);
				right = left + 1;
				
				fracX = prevX - left;
				fracY = prevY - top;
				
				// Wrap & compute indecies
				top = mod(top,_size)*_size;//(top & MOD) * _size;
				bot = mod(bot,_size)*_size;//(bot & MOD) * _size;
				left = mod(left,_size);//left & MOD;
				right = mod(right,_size);//right & MOD;
				
				// Evaluate Corners
				tl = quantity[top + left];
				tr = quantity[top + right];
				bl = quantity[bot + left];
				br = quantity[bot + right];
				
				// Blerp
				blerpLeft = tl + fracY*(bl-tl);
				blerpRight = tr + fracY*(br-tr);
				blerp = blerpLeft + fracX*(blerpRight-blerpLeft);
				
				// Update
				updated[index] = blerp;
				index++;
			}
		}
		
		return updated;
	}
	
	public int mod(int a, int b){
		return ((a % b) + b) % b;
	}
	
	public float mod(float a, int b){
		return ((a % b) + b) % b;
	}
	
	//// RENDERING ------------------------------------------------------------
	
	public void renderVelocity(BufferedImage bi){
		for(int x=0; x < _size; x++){
			for(int y=0; y< _size; y++){
				double velX = Math.abs(_u[x + _size * y]);
				double velY = Math.abs(_v[x + _size * y]);
				int red = (int) (velX / 100.0 * 255);
				int green = (int) (velY / 100.0 * 255);
				int blue = 0;
				int rgb = (red<<16) | (green<<8) | blue;
				bi.setRGB(x, y, rgb);
			}
		}
	}
	
	public void renderDensity(BufferedImage bi){
		for(int x=0; x < _size; x++){
			for(int y=0; y< _size; y++){
				double density = _d[x + _size * y];
				int red = (int) (density * 255);
				int blue = (int) (density * 255);
				int green = (int) (density * 255);
				int rgb = (red<<16) | (green<<8) | blue;
				
				bi.setRGB(x, y, rgb);
			}
		}
	}
	
	public void renderFlow(BufferedImage bi){
		Graphics2D g = bi.createGraphics();
		g.setColor(new Color(1f, 1f, 1f, 0.5f));
		for(int x=0; x < _size; x += 10){
			for(int y=0; y< _size; y += 10){
				double velX = Math.abs(_u[x + _size * y]);
				double velY = Math.abs(_v[x + _size * y]);
				g.drawLine(x, y, x+(int)(velX/20.0), y+(int)(velY/20.0));
			}
		}
	}
}
