package root;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;

import javax.swing.JFrame;
import javax.swing.Timer;

public class FluidMain extends JFrame implements ActionListener {
	//// SIMULATION PROPERTIES ------------------------------------------------
	
	// Constants
	public static final int FPS = 20;
	public static final int DELAY = 1000 / FPS;
	public static final double TIME_STEP = 0.05;
	
	public static final int FLUID_POWER = 8;
	public static final int FLUID_SIZE = (1 << FLUID_POWER);
	public static final double FRAME_SCALE = 1.5;
	public static final int FRAME_SIZE = FLUID_SIZE * FRAME_SCALE;
	
	// Rendering
	private BufferedImage _canvas;
	private BufferedImage _upscaled;
	private Timer _timer;
	private boolean _rendering = false;
	private AffineTransform _imgScale;
	private AffineTransformOp _imgScaleOp; 
	
	// Fluid Field
	private FluidField _fluid;
	
	
	//// CONSTRUCTOR ----------------------------------------------------------
	
	public static void main(String[] args){
		FluidMain fm = new FluidMain();
	}
	
	public FluidMain(){
		init();
		System.out.println(Math.floor(-5.2));
	}
	
	//// INITIALIZATION -------------------------------------------------------
	
	public void init(){
		buildInterface();
		
		// Configure Canvas
		_canvas = new BufferedImage(FLUID_SIZE, FLUID_SIZE, BufferedImage.TYPE_INT_RGB);
		_upscaled = new BufferedImage(FLUID_SIZE*2, FLUID_SIZE*2, BufferedImage.TYPE_INT_RGB);
		
		// Fluid
		_fluid = new FluidField(FLUID_SIZE);
		
		// Timer
		_timer = new Timer(DELAY, this);
		_timer.start();
		
		// Scale
		_imgScale = new AffineTransform();
		_imgScale.scale(FRAME_SCALE, FRAME_SCALE);
		_imgScaleOp = new AffineTransformOp(_imgScale, AffineTransformOp.TYPE_BILINEAR);
		_rendering = true;
		
		this.addMouseListener(new MouseAdapter(){
			public void mousePressed(MouseEvent e) {
				
			}

			public void mouseReleased(MouseEvent e) {
				update();
			}
		});
		
		this.addMouseMotionListener(new MouseMotionAdapter(){
			int prevX = 0;
			int prevY = 0;
			
			public void mouseMoved(MouseEvent e){
				prevX = e.getX();
				prevY = e.getY();
			}
			
			public void mouseDragged(MouseEvent e) {
				float diffX = e.getX() - prevX;
				float diffY = e.getY() - prevY;
				prevX = e.getX();
				prevY = e.getY();

				_fluid.impulse(diffX*10, diffY*10, prevX/2, prevY/2);
			}
		});
	}
	
	public void buildInterface(){
		this.setSize(FRAME_SIZE, FRAME_SIZE);
		this.setTitle("Incompressible Fluid Simulation");
		this.setDefaultCloseOperation(EXIT_ON_CLOSE);
		this.setResizable(false);
		this.setVisible(true);
	}
	
	//// UPDATE ---------------------------------------------------------------
	
	public void update(){
		_fluid.update(TIME_STEP);
	}
	
	//// RENDERING ------------------------------------------------------------
	
	public void paint(Graphics gr){
		if(!_rendering) return;
		
		Graphics2D g = (Graphics2D)gr;

		_canvas.flush();
		_fluid.renderDensity(_canvas);
		_fluid.renderFlow(_canvas);
		
		_imgScaleOp.filter(_canvas, _upscaled);
		g.drawImage(_upscaled, null, 0, 0);
	}
	
	//// ACTIONLISTENER -------------------------------------------------------

	@Override
	public void actionPerformed(ActionEvent e) {
		//update();
		this.repaint();
	}
}
